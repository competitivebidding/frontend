# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Address {
    address: String
    city: String
    country: String
    createdAt: DateTime!
    index: String
    updatedAt: DateTime!
}

type Auction {
    bids: [Bid!]
    createdAt: DateTime!
    creator: UserPublic!
    description: String!
    finishedAt: DateTime!
    id: Int!
    sortOrder: Int!
    startedAt: DateTime!
    startingPrice: Int!
    status: Status!
    title: String!
    updatedAt: DateTime!
    winner: UserPublic
}

type Bid {
    auctionId: Int!
    bitPrice: Int!
    createdAt: DateTime!
    id: Int!
    updatedAt: DateTime!
    user: UserPublic
    userId: Int!
}

type ChangePasswordDto {
    confirmationCode: String!
    email: String!
    password: String!
}

type ForgotPasswordDto {
    email: String!
}

type ItemNews {
    items: [News!]!
    totalCount: Int!
}

type LogoutResponse {
    loggedOut: Boolean!
}

type Message {
    content: String!
    createdAt: DateTime!
    id: Int!
    roomId: Int!
    updatedAt: DateTime!
    userId: Int!
}

type Mutation {
    addUserInRoom(addUser: AddUserInput!): UserPublic!
    changePassword: ChangePasswordDto!
    createMyAuction(input: CreateAuctionInput!): Auction!
    createMyBid(input: CreateBidInput!): Bid!
    createMyRoom(input: RoomCreateInput!): Room
    createMyTokenHistory(input: CreateHistoryInput!): TokenHistory
    createNews(data: NewsCreateInput!): News!
    createToken(data: CreateTokenInput!): Token
    deleteMyAuction(auctionId: Int!): Boolean!
    deleteMyBid(bidId: Int!): Boolean!
    deleteNews(id: Int!): Boolean!
    deleteToken(id: Int!): Boolean!
    editProfile(updateUserInput: UpdateUserInput!): User!
    forgotPassword: ForgotPasswordDto!
    getMyTokenHistories(input: TokenHistoryInput!): [TokenHistory!]
    getNewTokens: NewTokensResponse!
    getTokenById(id: Int!): Token
    joinToRoom(roomId: Float!): UserPublic!
    leaveFromRoom(roomId: Float!): UserPublic!
    logout(id: Int!): LogoutResponse!
    removeMessage(id: Float!): Message
    removeMyRoom(roomId: Float!): Room
    removeUserInRoom(addUser: AddUserInput!): UserPublic!
    sendMessage(newMessage: NewMessageInput!): Message
    signin(signInInput: SignInInput!): SignResponse!
    signup(signUpInput: SignUpInput!): SignResponse!
    updateMessage: Message
    updateMyAuction(auctionId: Int!, input: UpdateAuctionInput!): Auction!
    updateMyBid(bidId: Int!, data: UpdateBidInput!): Bid!
    updateMyRoom(input: RoomUpdateInput!, roomId: Float!): Room
    updateMyTokenHistory(input: UpdateHistoryInput!): TokenHistory
    updateNews(data: NewsUpdateInput!, id: Int!): News
    updateToken(data: UpdateTokenInput!, id: Int!): Token
    updateUserAddress(input: UpdateAddressInput!): Address!
    updateUserPayment(input: UpdatePaymentInput!): Payment!
}

type NewTokensResponse {
    accessToken: String!
    refreshToken: String!
}

type News {
    createdAt: DateTime!
    description: String
    id: Int!
    imageUrl: String
    title: String!
    updatedAt: DateTime!
    userId: Int!
}

type Payment {
    createdAt: DateTime!
    cvv: String
    firstname: String
    lastname: String
    month: String
    number: String
    patronymic: String
    updatedAt: DateTime!
    year: String
}

type Query {
    getAllAuctionStatuses: [Status!]!
    getAllMessagesByRoomId(userMessage: UserMessages!): [Message!]!
    getAllMyRooms: [Room!]!
    getAllNews(search: String, skip: Int = 0, sortBy: String, sortOrder: String = "asc", take: Int = 10): ItemNews!
    getAllRooms: [Room!]!
    getAllUsersByRoomId(roomId: Float!): [UserPublic!]!
    getAuction(auctionId: Int!): Auction!
    getAuctionStatusById(statusId: Int!): Status!
    getAuctions(skip: Int = 0, sortBy: String, sortOrder: String = "asc", take: Int = 10, where: AuctionInput = {}): [Auction!]!
    getBidById(bidId: Int!): Bid!
    getBidsByAuctionId(auctionId: Int!, skip: Int = 0, sortBy: String, sortOrder: String = "asc", take: Int = 10, where: BidInput = {}): [Bid!]!
    getMyCreatedAuctions(skip: Int = 0, sortBy: String, sortOrder: String = "asc", take: Int = 10): [Auction!]!
    getMyReferrals: [ReferralUser!]!
    getMyWonAuctions(skip: Int = 0, sortBy: String, sortOrder: String = "asc", take: Int = 10): [Auction!]!
    getNewsById(id: Int!): News!
    getProfile: User!
    getRoomById(roomId: Float!): Room!
    getRooms(input: RoomFindInput!): [Room!]!
    getUserAddress: Address!
    getUserPayment: Payment!
    secret: String!
}

type ReferralUser {
    createdAt: DateTime!
    cuid: String!
    email: String!
    id: Int!
    username: String!
}

type Room {
    createdAt: DateTime!
    description: String
    id: Int!
    ownerId: Int!
    title: String!
    updatedAt: DateTime!
}

type SignResponse {
    accessToken: String!
    refreshToken: String!
    user: User!
}

type Status {
    id: Int!
    name: String!
}

type Subscription {
    newMessage(roomId: Int!): Message!
}

type Token {
    createdAt: DateTime!
    description: String
    id: Int!
    points: Int!
    price: Float!
    sortOrder: Int!
    title: String
    updatedAt: DateTime!
}

type TokenHistory {
    createdAt: DateTime!
    id: Int!
    tokenId: Int!
    updatedAt: DateTime!
    userId: Int!
}

type User {
    avatarUrl: String
    confirmationCode: String
    createdAt: DateTime!
    email: String!
    firstname: String
    id: Int!
    instagram: String
    lastname: String
    patronymic: String
    phone: String
    updatedAt: DateTime
    username: String!
}

type UserPublic {
    avatarUrl: String
    firstname: String
    lastname: String
    username: String!
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input AddUserInput {
    roomId: Int!
    userId: Int!
}

input AuctionInput {
    createdAt: DateTime
    createdUserId: Int
    finishedAt: DateTime
    startedAt: DateTime
    statusId: Int
    wonUserId: Int
}

input BidInput {
    auctionId: Int
    bitPrice: Int
    createdAt: DateTime
    userId: Int
}

input CreateAuctionInput {
    description: String
    finishedAt: DateTime!
    startedAt: DateTime!
    startingPrice: Int!
    title: String!
}

input CreateBidInput {
    auctionId: Int!
    bitPrice: Int!
}

input CreateHistoryInput {
    points: Int!
    price: Float!
    tokenId: Int!
}

input CreateTokenInput {
    description: String!
    points: Int!
    price: Float!
    sortOrder: Int!
    title: String!
}

input NewMessageInput {
    content: String!
    roomId: Int!
}

input NewsCreateInput {
    description: String
    imageUrl: String
    title: String!
    userId: Int!
}

input NewsUpdateInput {
    description: String
    imageUrl: String
    title: String
    userId: Int
}

input RoomCreateInput {
    description: String!
    title: String!
}

input RoomFindInput {
    description: String
    title: String
}

input RoomUpdateInput {
    description: String
    ownerId: Int
    title: String
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    email: String!
    password: String!
    referrerUserId: Int
    username: String!
}

input TokenHistoryInput {
    id: Int!
    points: Int!
    price: Float!
    tokenId: Int!
    userId: Int!
}

input UpdateAddressInput {
    address: String
    city: String
    country: String
    id: Int
    index: String
    userId: Int
}

input UpdateAuctionInput {
    description: String
    finishedAt: DateTime
    startedAt: DateTime!
    startingPrice: Int
    title: String!
}

input UpdateBidInput {
    auctionId: Int
    bitPrice: Int
    id: Int!
}

input UpdateHistoryInput {
    id: Int!
    points: Int!
    price: Float!
    tokenId: Int!
    userId: Int!
}

input UpdatePaymentInput {
    cvv: String
    firstname: String
    id: Int
    lastname: String
    month: String
    number: String
    patronymic: String
    userId: Int
    year: String
}

input UpdateTokenInput {
    description: String
    points: Int!
    price: Float!
    sortOrder: Float!
    title: String
}

input UpdateUserInput {
    avatarUrl: String
    email: String
    firstname: String
    instagram: String
    lastname: String
    patronymic: String
    phone: String
    username: String
}

input UserMessages {
    roomId: Int
    userId: Int
}
